<?php

/**
 * @file
 * Module for converting nodes to use Layout Paragraphs.
 */

use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
use Drupal\Component\Plugin\Exception\PluginNotFoundException;
use Drupal\Core\Entity\EntityStorageException;
use Drupal\Core\TypedData\Exception\ReadOnlyException;
use Drupal\node\Entity\Node;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\views\Views;

/**
 * Convert nodes and their layouts to use Layout Paragraphs.
 */
function siteden_paragraphs_convert_nodes($nid, &$context) {
  $message = 'Converting nodes to Layout Paragraphsâ€¦';
  $results = $context['results'];
  try {
    $results[] = _siteden_paragraphs_convert_node($nid);
  }
  catch (InvalidPluginDefinitionException | PluginNotFoundException | EntityStorageException | ReadOnlyException $e) {
  }
  $context['message'] = $message;
  $context['results'] = $results;
}

/**
 * Batch finished callback.
 */
function siteden_paragraphs_convert_nodes_finished($success, $results, $operations) {
  if ($success) {
    $message = \Drupal::translation()->formatPlural(
      count($results),
      'One node processed. ðŸ¦„ ðŸŒˆ', '@count nodes processed. ðŸ¦„ ðŸŒˆ'
    );
  }
  else {
    $message = t('An error occurred while converting nodes to Layout Paragraphs. Review logs for details.');
  }
  \Drupal::messenger()->addStatus($message);
}

/**
 * Convert single node to Layout Paragraphs.
 *
 * @param string $nid
 *   The node ID.
 *
 * @return string
 *   The node ID.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 * @throws \Drupal\Core\Entity\EntityStorageException
 * @throws \Drupal\Core\TypedData\Exception\ReadOnlyException
 */
function _siteden_paragraphs_convert_node($nid): string {
  $node = Node::load($nid);

  // @todo Create real cleanup process for re-running this script.
  $node->get('field_sf_content')->setValue([]);

  // Convert any body summaries to the new summary field.
  if ($node->hasField('body') && $node->get('body')->summary && $node->hasField('field_sf_summary')) {
    $node->get('field_sf_summary')->setValue($node->get('body')->summary);
  }

  // See if the node has an overridden layout.
  if ($node->hasField('layout_builder__layout')) {
    $layout = $node->get('layout_builder__layout')->getValue();
  }

  if (empty($layout)) {
    if ($node->hasField('body') && $node->get('body')->value) {
      // This node uses the default layout, so create a single section for the body field.
      $section_paragraph = Paragraph::create([
        'type' => 'sf_section',
      ]);
      $section_paragraph->setBehaviorSettings('layout_paragraphs', [
        'layout' => 'layout_onecol',
        'config' => [
          'label' => '',
        ],
        'parent_uuid' => NULL,
        'region' => NULL,
      ]);
      $section_paragraph->save();
      $node->get('field_sf_content')->appendItem($section_paragraph);

      $parent_settings = [
        'parent_uuid' => $section_paragraph->uuid(),
        'region' => 'content',
      ];

      _siteden_paragraphs_convert_wysiwyg_widgets($node->get('body'), $parent_settings, $node->get('field_sf_content'));
    }
  }
  else {
    // This layout is overridden, so we have to go through the sections and extract the components.
    foreach ($layout as $item) {
      $section = $item['section'];
      $section_layout = $section->getLayoutId();

      $section_config = [];
      $section_config['label'] = $section->getLayoutSettings()['label'] ?? '';
      if (array_key_exists('column_widths', $section->getLayoutSettings())) {
        $section_config['column_widths'] = $section->getLayoutSettings()['column_widths'];
      }

      // Get all the components of the section.
      $section_components = $section->getComponents();

      if (empty($section_components)) {
        // If there are no components, skip this section.
        continue;
      }
      else {
        // Otherwise create a new Paragraph for the section and add it to the node.
        $section_style = $section->getThirdPartySettings('block_style_plugins')['full_width']['full_width'] ?? FALSE;

        $section_paragraph = Paragraph::create([
          'type' => 'sf_section',
        ]);
        $section_paragraph->setBehaviorSettings('layout_paragraphs', [
          'layout' => $section_layout,
          'config' => $section_config,
          'parent_uuid' => NULL,
          'region' => NULL,
        ]);

        if ($section_style) {
          // Set the section to be full width.
          $section_paragraph->setBehaviorSettings('style_options', [
            'container__width' => ['css_class' => 1],
          ]);
        }

        $section_paragraph->save();
        $node->get('field_sf_content')->appendItem($section_paragraph);
      }

      // Sort the components by weight, so they are processed in the correct visual order.
      usort($section_components, function ($a, $b) {
        return $a->getWeight() <=> $b->getWeight();
      });

      $section_has_components = FALSE;

      // Now loop through the components in the section and build the equivalent Paragraphs.
      foreach ($section_components as $component) {
        $component_type = $component->getConfiguration()['id'];
        $component_region = $component->getRegion();
        $parent_settings = [
          'parent_uuid' => $section_paragraph->uuid(),
          'region' => $component_region,
        ];

        $block_id = NULL;
        $block_content = NULL;

        if ($component_type === 'field_block:node:sf_page:body') {
          // The body field placed in a layout.
          if ($node->get('body')->value) {
            $section_has_components = TRUE;
            _siteden_paragraphs_convert_wysiwyg_widgets($node->get('body'), $parent_settings, $node->get('field_sf_content'));
          }
        }
        elseif (str_contains($component_type, 'inline_block:')) {
          // If this is an inline block, load the block content.
          $block_id = $component->getConfiguration()['block_revision_id'];
          $block_content = Drupal::entityTypeManager()
            ->getStorage('block_content')
            ->loadRevision($block_id);

          switch ($component_type) {
            case "inline_block:sf_basic":
              // Basic block.
              if ($block_content->get('body')->value) {
                $section_has_components = TRUE;
                _siteden_paragraphs_convert_wysiwyg_widgets($block_content->get('body'), $parent_settings, $node->get('field_sf_content'));
              }

              break;

            case "inline_block:sf_call_to_action":
              // Call to Action block.
              $section_has_components = TRUE;
              $block_paragraph = Paragraph::create([
                'type' => 'sf_text_banner',
                'field_sf_title' => [
                  'value' => $block_content->get('field_sf_title')->value,
                  'format' => 'sf_basic_html',
                ],
                'field_sf_link' => [
                  'uri' => $block_content->get('field_sf_link')->uri,
                  'title' => $block_content->get('field_sf_link')->title,
                ],
              ]);

              // Our call to action block has a gray background.
              $block_paragraph->setBehaviorSettings('style_options', [
                'banner_text__background' => ['css_class' => 2],
              ]);

              $block_paragraph->setBehaviorSettings('layout_paragraphs', $parent_settings);
              $block_paragraph->save();
              $node->get('field_sf_content')->appendItem($block_paragraph);

              break;

            case "inline_block:sf_card":
              // Card block.
              $section_has_components = TRUE;
              $card_style = $component->getThirdPartySettings('block_style_plugins')['card_type']['card_type'] ?? 'default';

              $block_paragraph = Paragraph::create([
                'type' => 'sf_card',
                'field_sf_wysiwyg' => [
                  'value' => $block_content->get('body')->value,
                  'format' => $block_content->get('body')->format,
                ],
                'field_sf_title' => [
                  'value' => $block_content->get('field_sf_title')->value,
                ],
                'field_sf_link' => [
                  'uri' => $block_content->get('field_sf_card_link')->uri,
                  'title' => $block_content->get('field_sf_card_link')->title,
                ],
                'field_sf_image' => [
                  'target_id' => $block_content->get('field_sf_card_image')->target_id,
                ],
              ]);

              if ($card_style === 'blue') {
                // Set the background color to blue.
                $block_paragraph->setBehaviorSettings('style_options', [
                  'card__background' => ['css_class' => 1],
                ]);
              }
              elseif ($card_style === 'light') {
                // Set the background color to white.
                $block_paragraph->setBehaviorSettings('style_options', [
                  'card__background' => ['css_class' => 2],
                ]);
              }

              $block_paragraph->setBehaviorSettings('layout_paragraphs', $parent_settings);
              $block_paragraph->save();
              $node->get('field_sf_content')->appendItem($block_paragraph);

              break;

            case "inline_block:sf_card_grid":
              // Card grid block.
              $section_has_components = TRUE;
              $card_style = $component->getThirdPartySettings('block_style_plugins')['card_type']['card_type'] ?? 'default';

              $block_paragraph = Paragraph::create([
                'type' => 'sf_card_grid',
                'field_sf_card' => $block_content->get('field_sf_card')
                  ->getValue(),
              ]);

              if ($card_style === 'blue') {
                // Set the background color to blue.
                $block_paragraph->setBehaviorSettings('style_options', [
                  'card__background' => ['css_class' => 1],
                ]);
              }
              elseif ($card_style === 'light') {
                // Set the background color to white.
                $block_paragraph->setBehaviorSettings('style_options', [
                  'card__background' => ['css_class' => 2],
                ]);
              }

              $block_paragraph->setBehaviorSettings('layout_paragraphs', $parent_settings);
              $block_paragraph->save();
              $node->get('field_sf_content')->appendItem($block_paragraph);

              break;

            case "inline_block:sf_focal_link":
              // Focal link block.
              $section_has_components = TRUE;
              $block_paragraph = Paragraph::create([
                'type' => 'sf_focal_link',
                'field_sf_title' => [
                  'value' => $block_content->get('field_sf_title')->value,
                ],
                'field_sf_link' => [
                  'uri' => $block_content->get('field_sf_link')->uri,
                ],
                'field_sf_image' => [
                  'target_id' => $block_content->get('field_sf_m_block_primary_img')->target_id,
                ],
                'field_sf_focal_icon' => [
                  'value' => $block_content->get('field_sf_icons')->value,
                ],
                'field_sf_focal_custom' => [
                  'value' => !$block_content->get('field_sf_icon_choice')->value,
                ],
              ]);
              $block_paragraph->setBehaviorSettings('layout_paragraphs', $parent_settings);
              $block_paragraph->save();
              $node->get('field_sf_content')->appendItem($block_paragraph);

              break;

            case "inline_block:sf_hero_banner":
              // Hero banner blocks.
              $section_has_components = TRUE;
              $banner_style = $component->getThirdPartySettings('block_style_plugins')['banner_style']['banner_style'] ?? 'default';

              if (empty($block_content->get('field_sf_title')->value) && empty($block_content->get('field_sf_link')->value)) {
                // If there is no title or link, this is an image-only banner.
                $banner_style = 'image_only';
              }

              if ($banner_style === 'default' || $banner_style === 'reverse') {
                // Default or reversed variants.
                $block_paragraph = Paragraph::create([
                  'type' => 'sf_box_banner',
                  'field_sf_title' => [
                    'value' => $block_content->get('field_sf_title')->value,
                  ],
                  'field_sf_link' => [
                    'uri' => $block_content->get('field_sf_link')->uri,
                    'title' => $block_content->get('field_sf_link')->title,
                  ],
                  'field_sf_wysiwyg' => [
                    'value' => $block_content->get('field_sf_hb_sub_title')->value,
                    'format' => 'sf_basic_html',
                  ],
                  'field_sf_image' => [
                    'target_id' => $block_content->get('field_sf_m_block_primary_img')->target_id,
                  ],
                ]);

                if ($banner_style === 'reverse') {
                  // Set the background color to white and the image alignment to right.
                  $block_paragraph->setBehaviorSettings('style_options', [
                    'banner__background' => ['css_class' => 1],
                    'banner__image_alignment' => ['css_class' => 1],
                  ]);
                }
                else {
                  // Set the background color to white because we don't have a blue banner yet.
                  $block_paragraph->setBehaviorSettings('style_options', [
                    'banner__background' => ['css_class' => 1],
                  ]);
                }

                $block_paragraph->setBehaviorSettings('layout_paragraphs', $parent_settings);
                $block_paragraph->save();
                $node->get('field_sf_content')->appendItem($block_paragraph);
              }
              elseif ($banner_style === 'full_bg_ribbon' || $banner_style === 'image_only') {
                // Ribbon banner variant.
                $block_paragraph = Paragraph::create([
                  'type' => 'sf_ribbon_text_banner',
                  'field_sf_title' => [
                    'value' => $block_content->get('field_sf_title')->value,
                  ],
                  'field_sf_link' => [
                    'uri' => $block_content->get('field_sf_link')->uri,
                    'title' => $block_content->get('field_sf_link')->title,
                  ],
                  'field_sf_image' => [
                    'target_id' => $block_content->get('field_sf_m_block_primary_img')->target_id,
                  ],
                ]);

                $block_paragraph->setBehaviorSettings('layout_paragraphs', $parent_settings);
                $block_paragraph->save();
                $node->get('field_sf_content')->appendItem($block_paragraph);
              }
              elseif ($banner_style === 'full_bg_molecule') {
                // Molecule banner variant.
                $block_paragraph = Paragraph::create([
                  'type' => 'sf_ribbon_text_banner',
                  'field_sf_title' => [
                    'value' => $block_content->get('field_sf_title')->value,
                  ],
                  'field_sf_link' => [
                    'uri' => $block_content->get('field_sf_link')->uri,
                    'title' => $block_content->get('field_sf_link')->title,
                  ],
                  'field_sf_wysiwyg' => [
                    'value' => $block_content->get('field_sf_hb_sub_title')->value,
                    'format' => 'sf_basic_html',
                  ],
                  'field_sf_image' => [
                    'target_id' => $block_content->get('field_sf_m_block_primary_img')->target_id,
                  ],
                ]);

                $block_paragraph->setBehaviorSettings('layout_paragraphs', $parent_settings);
                $block_paragraph->save();
                $node->get('field_sf_content')->appendItem($block_paragraph);
              }
              else {
                // Display error for other banner styles.
                $block_paragraph = Paragraph::create([
                  'type' => 'sf_text',
                  'field_sf_wysiwyg' => [
                    'value' => '<div class="alert alert--secondary"><pre>Inline block<br>type: ' . $component_type . '<br>block id: ' . $block_id . '</pre></div>',
                    'format' => 'sf_full_html',
                  ],
                ]);
                $block_paragraph->setBehaviorSettings('layout_paragraphs', $parent_settings);
                $block_paragraph->save();
                $node->get('field_sf_content')->appendItem($block_paragraph);
              }

              break;

            case "inline_block:sf_iframe_embed":
              // Iframe embed block.
              $section_has_components = TRUE;
              // We can load the Paragraph from the block field and attach it directly to the node.
              $block_paragraph = Paragraph::load($block_content->get('field_sf_iframe_embed')->target_id);
              $block_paragraph->setBehaviorSettings('layout_paragraphs', $parent_settings);
              $block_paragraph->save();
              $node->get('field_sf_content')->appendItem($block_paragraph);

              break;

            case "inline_block:sf_marketing_highlight":
            case "inline_block:sf_marketing_highlight_horizntl":
              // Marketing highlight blocks.
              $section_has_components = TRUE;
              $block_paragraph = Paragraph::create([
                'type' => 'sf_card',
                'field_sf_wysiwyg' => [
                  'value' => $block_content->get('field_sf_mh_description')->value,
                  'format' => 'sf_basic_html',
                ],
                'field_sf_title' => [
                  'value' => $block_content->get('field_sf_title')->value,
                ],
                'field_sf_link' => [
                  'uri' => $block_content->get('field_sf_link')->uri,
                  'title' => $block_content->get('field_sf_mh_call_to_action')->value ?? $block_content->get('field_sf_title')->value,
                ],
                'field_sf_image' => [
                  'target_id' => $block_content->get('field_sf_m_block_primary_img')->target_id,
                ],
              ]);

              if ($component_type === 'inline_block:sf_marketing_highlight_horizntl') {
                // Set the card orientation to horizontal and make the background white.
                $block_paragraph->setBehaviorSettings('style_options', [
                  'card__orientation' => ['css_class' => 1],
                  'card__background' => ['css_class' => 2],
                ]);
              }

              $block_paragraph->setBehaviorSettings('layout_paragraphs', $parent_settings);
              $block_paragraph->save();
              $node->get('field_sf_content')->appendItem($block_paragraph);

              break;

            case "inline_block:sf_people":
              // People grid block.
              $section_has_components = TRUE;
              $block_paragraph = Paragraph::create([
                'type' => 'sf_people',
                'field_sf_person_item' => $block_content->get('field_sf_person_item')
                  ->getValue(),
              ]);
              $block_paragraph->setBehaviorSettings('layout_paragraphs', $parent_settings);
              $block_paragraph->save();
              $node->get('field_sf_content')->appendItem($block_paragraph);

              break;

            case "inline_block:sf_slider":
              // Slider block.
              $section_has_components = TRUE;
              $block_paragraph = Paragraph::create([
                'type' => 'sf_slider',
                'field_sf_slideshow_item' => $block_content->get('field_sf_slideshow_item')
                  ->getValue(),
              ]);
              $block_paragraph->setBehaviorSettings('layout_paragraphs', $parent_settings);
              $block_paragraph->save();
              $node->get('field_sf_content')->appendItem($block_paragraph);

              break;

            case "inline_block:sf_tabs":
              // Tabs block.
              $section_has_components = TRUE;
              $block_paragraph = Paragraph::create([
                'type' => 'sf_tabs',
                'field_sf_tab' => $block_content->get('field_sf_tab')
                  ->getValue(),
              ]);
              $block_paragraph->setBehaviorSettings('layout_paragraphs', $parent_settings);
              $block_paragraph->save();
              $node->get('field_sf_content')->appendItem($block_paragraph);

              break;

            case "inline_block:sf_view_embed":
              // View embed block.
              $section_has_components = TRUE;
              // We can load the Paragraph from the block field and attach it directly to the node.
              $block_paragraph = Paragraph::load($block_content->get('field_sf_view_embed')->target_id);
              $block_paragraph->setBehaviorSettings('layout_paragraphs', $parent_settings);
              $block_paragraph->save();
              $node->get('field_sf_content')->appendItem($block_paragraph);

              break;

            default:
              // Catch-all for any other inline block types.
              $section_has_components = TRUE;
              $block_paragraph = Paragraph::create([
                'type' => 'sf_text',
                'field_sf_wysiwyg' => [
                  'value' => '<div class="alert alert--secondary"><pre>Inline block<br>type: ' . $component_type . '<br>block id: ' . $block_id . '</pre></div>',
                  'format' => 'sf_full_html',
                ],
              ]);
              $block_paragraph->setBehaviorSettings('layout_paragraphs', $parent_settings);
              $block_paragraph->save();
              $node->get('field_sf_content')->appendItem($block_paragraph);

              break;
          }
        }
        elseif (str_contains($component_type, 'views_block:')) {
          // We're in a Views block.
          $section_has_components = TRUE;
          $view_settings = str_replace('views_block:', '', $component_type);
          $view_id = substr($view_settings, 0, strpos($view_settings, '-'));
          $view_display = substr($view_settings, strpos($view_settings, '-') + 1);
          $view_title = [];

          if ($component->getConfiguration()['label_display']) {
            // If the block is set to display the title, add it to the Paragraph.
            if ($component->getConfiguration()['label'] !== '') {
              // If the title of the view has been overridden by the block, use that.
              $view_title = [
                'value' => $component->getConfiguration()['label'],
              ];
            }
            else {
              // Otherwise we have to load the view and get the title of the display.
              $get_view = Views::getView($view_id);
              $get_display = $get_view->getDisplay($view_display);
              $view_title = [
                'value' => $get_display->display['display_options']['title'],
              ];
            }
          }

          $block_paragraph = Paragraph::create([
            'type' => 'sf_view_embed',
            'field_sf_title' => $view_title,
            'field_sf_view' => [
              'target_id' => $view_id,
              'display_id' => $view_display,
            ],
          ]);
          $block_paragraph->setBehaviorSettings('layout_paragraphs', $parent_settings);
          $block_paragraph->save();
          $node->get('field_sf_content')->appendItem($block_paragraph);
        }
        elseif (str_contains($component_type, 'block_content:')) {
          // We're in a placed custom block.
          $section_has_components = TRUE;
          $block_uuid = substr($component->getConfiguration()['id'], strpos($component->getConfiguration()['id'], ':') + 1);

          // Load the block using the uuid.
          $block_content = Drupal::entityTypeManager()
            ->getStorage('block_content')
            ->loadByProperties(['uuid' => $block_uuid]);

          if (!$block_content) {
            // If we can't load the block, skip it.
            continue;
          }

          // Get the block type and id.
          $block_content = $block_content[array_key_first($block_content)];
          $block_type = $block_content->bundle();
          $block_id = $block_content->id();

          // Create a placeholder block.
          $block_paragraph = Paragraph::create([
            'type' => 'sf_text',
            'field_sf_wysiwyg' => [
              'value' => '<div class="alert alert--secondary"><pre>Placed block<br>type: ' . $block_type . '<br>block id: ' . $block_id . '</pre></div>',
              'format' => 'sf_full_html',
            ],
          ]);
          $block_paragraph->setBehaviorSettings('layout_paragraphs', $parent_settings);
          $block_paragraph->save();
          $node->get('field_sf_content')->appendItem($block_paragraph);
        }
        elseif (str_contains($component_type, 'menu_block:')) {
          // We're in a menu block.
          $section_has_components = TRUE;
          $block_paragraph = Paragraph::create([
            'type' => 'sf_text',
            'field_sf_wysiwyg' => [
              'value' => '<div class="alert alert--secondary"><pre>Menu block<br>type: ' . $component_type . '</pre></div>',
              'format' => 'sf_full_html',
            ],
          ]);
          $block_paragraph->setBehaviorSettings('layout_paragraphs', $parent_settings);
          $block_paragraph->save();
          $node->get('field_sf_content')->appendItem($block_paragraph);
        }
        elseif (str_contains($component_type, 'webform_block')) {
          // We're in a webform block.
          $section_has_components = TRUE;
          $webform_config = $component->getConfiguration();

          $block_paragraph = Paragraph::create([
            'type' => 'sf_block_embed',
            'field_sf_block' => [
              'plugin_id' => 'webform_block',
              'settings' => $webform_config,
            ],
          ]);
          $block_paragraph->setBehaviorSettings('layout_paragraphs', $parent_settings);
          $block_paragraph->save();
          $node->get('field_sf_content')->appendItem($block_paragraph);
        }
      }

      // If this section doesn't end up having any converted components, we can delete it.
      if (!$section_has_components) {
        $node_section = Paragraph::load($section_paragraph->id());
        $node_section->delete();
      }
    }
  }

  // Save the node.
  $node->save();
  return $nid;
}

/**
 * Helper function to convert WYSIWYG widgets to new Paragraphs.
 *
 * @param object|string $source
 *   The source string to convert.
 * @param array $parent_settings
 *   The behavior settings for the parent Paragraph.
 * @param \Drupal\paragraphs\ParagraphInterface $destination
 *   The destination Paragraph.
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function _siteden_paragraphs_convert_wysiwyg_widgets($source, $parent_settings, $destination): void {
  // Create a new html-fragment element to wrap the source value, so we can select child nodes.
  $source_value = $source->value ?? $source;
  $source_format = $source->format ?? 'sf_basic_html';
  $source_string = "<html-fragment>" . $source_value . "</html-fragment>";
  if ($source_string === '<html-fragment></html-fragment>') {
    // If the source is empty, just return.
    return;
  }
  $body_dom = new DOMDocument();
  $body_dom->loadHTML('<?xml encoding="utf-8" ?>' . $source_string, LIBXML_NOERROR);
  $body_children = $body_dom->getElementsByTagName('html-fragment')
    ->item(0)->childNodes;

  $body_groups = [];
  $bodyIndex = -1;
  $incrementBodyIndex = TRUE;

  // Now loop through all of the children of the html-fragment.
  foreach ($body_children as $body_child) {
    $child_html = $body_child->ownerDocument->saveHTML($body_child);

    if ($body_child->nodeName == 'ul' && $body_child->attributes->getNamedItem('class') && $body_child->attributes->getNamedItem('class')->nodeValue == 'list--accordion') {
      // We're in an accordion widget.
      $bodyIndex++;
      $body_groups[$bodyIndex] = $child_html;
      $incrementBodyIndex = TRUE;
    }
    elseif ($body_child->nodeName == 'layout-columns') {
      // We're in a layout-columns widget.
      $bodyIndex++;
      $body_groups[$bodyIndex] = $child_html;
      $incrementBodyIndex = TRUE;
    }
    elseif ($body_child->nodeName == 'feature-block') {
      // We're in a wysiwyg-feature-block widget.
      $bodyIndex++;
      $body_groups[$bodyIndex] = $child_html;
      $incrementBodyIndex = TRUE;
    }
    else {
      // We're in normal text.
      if ($incrementBodyIndex) {
        $bodyIndex++;
      }
      $body_groups[$bodyIndex] = array_key_exists($bodyIndex, $body_groups) ? $body_groups[$bodyIndex] . $child_html : $child_html;
      $incrementBodyIndex = FALSE;
    }
  }

  foreach ($body_groups as $body_group) {
    $body_group = trim($body_group, " \n\r\t");
    // Create a new DOMDocument from the text for easier manipulation later.
    $dom = new DOMDocument();
    $dom->loadHTML('<?xml encoding="utf-8" ?>' . $body_group, LIBXML_NOERROR);

    if (str_starts_with($body_group, '<ul class="list--accordion"')) {
      // We are in an accordion. Get the list items and add their values to an array.
      $list_items = $dom->getElementsByTagName('li');
      $list_value_array = [];

      foreach ($list_items as $list_index => $list_item) {
        if ($list_index % 2 === 0) {
          // This should become a title, extract only the text.
          $list_value_array[] = trim($list_item->nodeValue, " \n\r\t");
        }
        else {
          // This should become content, extract the inner HTML.
          $list_value_array[] = _siteden_paragraphs_convert_get_inner_html($list_item);
        }
      }

      // Parse the array and add the values to new sf_accordion_item Paragraphs.
      $item_paragraphs = [];
      foreach ($list_value_array as $list_index => $list_value) {
        if ($list_index % 2 == 0) {
          $accordion_title = $list_value_array[$list_index];
          $accordion_content = $list_value_array[$list_index + 1] ?? '';

          // If the title is too long, truncate it and add the rest to the content.
          if (strlen($accordion_title) > 250) {
            $accordion_title = substr($accordion_title, 0, 250) . 'â€¦';
            $accordion_content = '<p>' . substr($accordion_title, 250) . '</p>' . $accordion_content;
          }
          $item_paragraphs[] = Paragraph::create([
            'type' => 'sf_accordion_item',
            'field_sf_title' => [
              'value' => $accordion_title,
            ],
            'field_sf_wysiwyg' => [
              'value' => $accordion_content,
              'format' => 'sf_basic_html',
            ],
          ]);
        }
      }

      // Create a new sf_accordion Paragraph and attach the sf_accordion_item Paragraphs.
      $block_paragraph = Paragraph::create([
        'type' => 'sf_accordion',
        'field_sf_accordion_item' => $item_paragraphs,
      ]);
      $block_paragraph->setBehaviorSettings('layout_paragraphs', $parent_settings);
      $block_paragraph->save();
      $destination->appendItem($block_paragraph);
    }
    elseif (str_starts_with($body_group, '<layout-columns')) {
      // We are in a layout column widget.
      $layout_item = $dom->getElementsByTagName('layout-columns')->item(0);
      $layout_columns = $layout_item->getAttribute('columns');
      $layout_column_widths = $layout_item->getAttribute('layout');
      $layout_name = '';
      $layout_regions = [];

      // Set up the layout names and regions.
      switch ($layout_columns) {
        case '1':
          $layout_name = 'layout_onecol';
          $layout_regions = ['content'];
          break;

        case '2';
          $layout_name = 'layout_twocol_section';
          $layout_regions = ['first', 'second'];
          break;

        case '3':
          $layout_name = 'layout_threecol_section';
          $layout_regions = ['first', 'second', 'third'];
          break;

        case '4':
          $layout_name = 'layout_fourcol_section';
          $layout_regions = ['first', 'second', 'third', 'fourth'];
          break;
      }

      $layout_config = [];
      $layout_config['label'] = '';
      if ($layout_column_widths) {
        $layout_config['column_widths'] = $layout_column_widths;
      }

      // Create a new section Paragraph.
      $block_paragraph = Paragraph::create([
        'type' => 'sf_section',
      ]);
      $block_paragraph->setBehaviorSettings('layout_paragraphs', [
        'layout' => $layout_name,
        'config' => $layout_config,
        'parent_uuid' => $parent_settings['parent_uuid'],
        'region' => $parent_settings['region'],
      ]);
      $block_paragraph->save();
      $destination->appendItem($block_paragraph);

      // Create the column content Paragraphs.
      $column_contents = $layout_item->childNodes;

      foreach ($column_contents as $column_content) {
        if ($column_content->nodeName === 'div' && $column_content->getAttribute('slot')) {
          $slot_num = intval(str_replace('column', '', $column_content->getAttribute('slot')));

          if ($slot_num <= $layout_columns) {
            $column_value = _siteden_paragraphs_convert_get_inner_html($column_content);

            $column_settings = [
              'parent_uuid' => $block_paragraph->uuid(),
              'region' => $layout_regions[$slot_num - 1],
            ];

            _siteden_paragraphs_convert_wysiwyg_widgets($column_value, $column_settings, $destination);
          }
        }
      }
    }
    elseif (str_starts_with($body_group, '<feature-block')) {
      // We are in a feature block widget.
      $feature_title = '';
      $feature_content = '';

      $feature_elements = $dom->getElementsByTagName('div');
      foreach ($feature_elements as $feature_element) {
        if ($feature_element->getAttribute('slot') === 'title') {
          $feature_title = trim($feature_element->nodeValue, " \n\r\t");
        }
        elseif ($feature_element->getAttribute('slot') === 'body') {
          $feature_content = _siteden_paragraphs_convert_get_inner_html($feature_element);
        }
      }
      $block_paragraph = Paragraph::create([
        'type' => 'sf_text_banner',
        'field_sf_title' => [
          'value' => $feature_title,
        ],
        'field_sf_wysiwyg' => [
          'value' => $feature_content,
          'format' => 'sf_basic_html',
        ],
      ]);

      $block_paragraph->setBehaviorSettings('layout_paragraphs', $parent_settings);
      $block_paragraph->save();
      $destination->appendItem($block_paragraph);
    }
    else {
      if ($source_format === 'sf_full_html') {
        // We are in a custom code section.
        if ($body_group) {
          $block_paragraph = Paragraph::create([
            'type' => 'sf_custom_code',
            'field_sf_code' => [
              'value' => $body_group,
            ],
          ]);

          $block_paragraph->setBehaviorSettings('layout_paragraphs', $parent_settings);
          $block_paragraph->save();
          $destination->appendItem($block_paragraph);
        }
      }
      else {
        // We are in a generic text section.
        if ($body_group) {
          $block_paragraph = Paragraph::create([
            'type' => 'sf_text',
            'field_sf_wysiwyg' => [
              'value' => $body_group,
              'format' => $source_format,
            ],
          ]);

          $block_paragraph->setBehaviorSettings('layout_paragraphs', $parent_settings);
          $block_paragraph->save();
          $destination->appendItem($block_paragraph);
        }
      }
    }
  }
}

/**
 * Helper function to get the inner HTML of a DOMNode.
 *
 * @param DOMNode $node
 *   The DOMNode.
 *
 * @return string
 *   The inner HTML of the DOMNode.
 */
function _siteden_paragraphs_convert_get_inner_html(DOMNode $node): string {
  $innerHTML = '';
  $children = $node->childNodes;

  foreach ($children as $child) {
    $innerHTML .= trim($child->ownerDocument->saveHTML($child), " \n\r\t");
  }

  return $innerHTML;
}
