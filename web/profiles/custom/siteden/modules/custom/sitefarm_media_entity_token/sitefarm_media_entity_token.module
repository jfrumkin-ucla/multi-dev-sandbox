<?php

/**
 * @file
 * Contains sitefarm_media_entity_token.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\media\Entity\Media;
use Drupal\file\Entity\File;
use Drupal\image\Entity\ImageStyle;

/**
 * Implements hook_help().
 */
function sitefarm_media_entity_token_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the sitefarm_media_entity_token module.
    case 'help.page.sitefarm_media_entity_token':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Create custom tokens for url to media entity image and image info') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_token_info().
 */
function sitefarm_media_entity_token_token_info() {
  $info = [];
  $info['types']['sitefarm-custom'] = [
    'name' => t('SiteFarm Custom'),
    'description' => t('Custom tokens for retrieving data that current tokens cannot get.'),
  ];
  $info['tokens']['sitefarm-custom']['media_ref_field_url'] = [
    'name' => t('Related Media URL'),
    'description' => t('Gets the url of a media image reference. Requires 2 arguments. Referencing field machine name and image style machine name. Ex: [sitefarm-custom:media_ref_field_url:field_machine_name:image_style_machine_name])'),
    'module' => 'sitefarm_media_entity_token',
    'type' => 'url',
    'dynamic' => TRUE,
  ];
  return $info;
}

/**
 * Implements hook_tokens().
 */
function sitefarm_media_entity_token_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {

  // Make sure all the data is there and this is the SiteFarm Custom token group.
  if (!isset($data['node']) || !isset($tokens) || $type != 'sitefarm-custom') {
    return [];
  }

  // Process tokens.
  $token_results = str_replace(['[', ']'], '', reset($tokens));
  $token_parts = explode(":", $token_results);

  // Make sure this is the media_ref_field_url token and it has all the arguments required.
  if (!in_array('media_ref_field_url', $token_parts) && count($token_parts) != 4) {
    return [];
  }

  // Get the field and image style arguments.
  $image_ref_field = $token_parts[2];
  $image_style = $token_parts[3];

  // Get reference field.
  $node = $data['node'];
  $field = $node->get($image_ref_field)->getValue();

  // Make sure media entity ref id exists.
  if (!isset($field[0]['target_id'])) {
    return [];
  }

  // Get referenced media entity url and pass it to the token for output.
  $mid = $field[0]['target_id'];
  $media = Media::load($mid);
  $fid = $media->getSource()->getSourceFieldValue($media);
  $url = '';

  // If the media type is not a video get the file information.
  // Remote video media types do not have a file to look up.
  if ($media->bundle() !== "sf_video_media_type") {
    $file = File::load($fid);
    $uri = $file->getFileUri();
    $url = ImageStyle::load($image_style)->buildUrl($uri);
  }

  // If the media type is a remote video type then set the url to the value.
  if ($media->bundle() === "sf_video_media_type") {
    $url = $fid;
  }

  $replacements = [
    reset($tokens) => $url,
  ];

  return $replacements;
}
