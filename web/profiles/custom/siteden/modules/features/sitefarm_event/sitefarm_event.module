<?php

/**
 * @file
 */

use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_preprocess_node()
 */
function sitefarm_event_preprocess_node(&$variables) {
  $type = $variables['node']->getType();

  // Provide calendar info to add to cal button.
  if ($variables['view_mode'] == 'full' && $type == 'sf_event') {
    // Get Node by ID.
    $node = $variables['node'];
    $nid = $node->id();
    // Prepare fields to be passed to JS.
    $start_date_value = $node->field_sf_dates->value;
    $end_date_value = $node->field_sf_dates->end_value;
    $start_date_local = strtotime($start_date_value . ' UTC');
    $end_date_local = strtotime($end_date_value . ' UTC');
    $start_date = \Drupal::service('date.formatter')->format($start_date_local, 'custom', 'F d, o H:i');
    $end_date = \Drupal::service('date.formatter')->format($end_date_local, 'custom', 'F d, o H:i');
    $event_address = $node->field_sf_event_location->value;
    // Pass data to JS.
    $event = [
      'title' => $node->getTitle(),
      'start_date' => $start_date,
      'end_date' => $end_date,
      'desc' => $GLOBALS['base_url'] . \Drupal::service('path_alias.manager')->getAliasByPath('/node/' . $nid),
    ];
    if ($event_address) {
      $event_address_clean = t($event_address);
      $event['address'] = $event_address_clean->jsonSerialize();
    }
    $variables['#attached']['drupalSettings']['event'] = $event;
  }
}

/**
 * Implements hook_form_alter().
 */
function sitefarm_event_form_alter(&$form, &$form_state, $form_id) {
  // Move Node Edit fields into the advanced tabs group.
  $advanced_tabs = \Drupal::service('sf.advanced_tabs')->loadForm($form);

  // Move the Event Type field to the Categorization group.
  $advanced_tabs->moveField('field_sf_event_type', 'categorizing');

  // Move the Person Reference field into the Related Content group.
  $advanced_tabs->moveField('field_sf_person_reference', 'related');

  $form = $advanced_tabs->save();
}

/**
 * Implements hook_theme().
 */
function sitefarm_event_theme($existing, $type, $theme, $path) {
  return [
    'date_range' => [
      'variables' => [
        'date' => NULL,
        'separator' => NULL,
        'time' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_element_info_alter().
 */
function sitefarm_event_element_info_alter(array &$types) {
  $types['datetime']['#process'][] = '_sitefarm_event_sf_dates_format';
  $types['datetime']['#element_validate'][] = '_sitefarm_event_sf_dates_validate';
}

/**
 * Element process callback for datetime field_sf_dates.
 */
function _sitefarm_event_sf_dates_format(&$element, FormStateInterface $form_state, &$complete_form) {
  if (isset($element['#id']) && ($element['#id'] == 'edit-field-sf-dates-0-value' || $element['#id'] == 'edit-field-sf-dates-0-end-value')) {
    // Add a date placeholder.
    $element['date']['#attributes']['placeholder'] = 'yyyy-mm-dd';

    // Remove seconds in browsers that support HTML5 type=time.
    $element['time']['#attributes']['step'] = '60';
    $element['time']['#attributes']['title'] = t('Time (e.g. @format)', [
      '@format' => (new \DateTime())->format('H:i'),
    ]);
    $element['time']['#attributes']['placeholder'] = '13:00';

    // Strip the seconds off the time.
    $element['time']['#value'] = substr($element['time']['#value'], 0, -3);
  }

  return $element;
}

/**
 * Element process callback for datetime field_sf_dates validate.
 */
function _sitefarm_event_sf_dates_validate(&$element, FormStateInterface $form_state, &$complete_form) {
  if (isset($element['#id']) && ($element['#id'] == 'edit-field-sf-dates-0-value' || $element['#id'] == 'edit-field-sf-dates-0-end-value')) {

    // Get all errors.
    $errors = $form_state->getErrors();

    // Get any errors for this field.
    $error = $form_state->getError($element);

    if ($error && count($errors) == 1) {
      // First remove existing errors.
      $form_state->clearErrors();

      $string = $error->getUntranslatedString();
      $arguments = $error->getArguments();

      // Strip the seconds off the time.
      $arguments['%format'] = substr($arguments['%format'], 0, -3);

      $form_state->setError($element, t($string, $arguments));
    }

  }

  return $element;
}
