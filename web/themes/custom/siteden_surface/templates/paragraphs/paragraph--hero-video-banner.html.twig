  {#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{{ attach_library('classy/file') }}

{%
  set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished'
  ]
%}
{% block paragraph %}
  <div{{ attributes.addClass(classes) }}>
    {% block content %}  
      <span aria-hidden="true" class="has-background-dim"></span>
      {% include '@siteden-components/file-video.html.twig' with {
        file: file_url(content.field_hero_video[0]['#media'].field_media_video_file|file_uri),
        alt_text: content.field_sf_description[0]['#context']['value']
      } %}

      {% if content.field_video_text_overlay.0 is not empty %}
        <div class="hero-video-image-overlay">
          <span class="hero-video-text">{{ content.field_video_text_overlay }}</span> 
        </div>
      {% else %}
        <div class="hero-video-image-overlay">
          {{ content.field_sf_image }} 
        </div>
      {% endif %}
      <div class="hero-video-link">
        {{ content.field_sf_link }} 
      </div>
      <button class="ucla__cover_button-control playing"><img alt="play pause button" src="/themes/custom/siteden_surface/assets/images/icons/denotive/icons8-pause-button-48.png"></button>
    {% endblock %}
  </div>
{% endblock paragraph %}
